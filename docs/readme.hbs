# @CentralPing/micro-json-api-query

[![Build Status](https://travis-ci.org/CentralPing/micro-json-api-query.svg?branch=master)](https://travis-ci.org/CentralPing/micro-json-api-query)
[![Coverage Status](https://coveralls.io/repos/github/CentralPing/micro-json-api-query/badge.svg)](https://coveralls.io/github/CentralPing/micro-json-api-query)
[![Dependency Status](https://david-dm.org/CentralPing/micro-json-api-query.svg)](https://david-dm.org/CentralPing/micro-json-api-query)
[![Greenkeeper Status](https://badges.greenkeeper.io/CentralPing/micro-json-api-query.svg)](https://greenkeeper.io/)
[![Known Vulnerabilities](https://snyk.io/test/github/centralping/micro-json-api-query/badge.svg)](https://snyk.io/test/github/centralping/micro-json-api-query)

A [micro](https://github.com/zeit/micro) wrapper for parsing and validating querystrings with [json-api-query](https://github.com/CentralPing/json-api-query).

## Installation

`npm i --save @centralping/micro-json-api-query`

## API Reference

{{#module name="microJsonApiQuery"~}}
{{>body~}}
{{>members~}}
{{/module}}

## Examples

### For Default Parsing

```js
const {parse} = require('@centralping/micro-json-api-query');

const parser = parse();

// req is the micro request object
const {query} = parser(req);
```

### For AJV Options

```js
const {parse} = require('@centralping/micro-json-api-query');

const parser = parse({allErrors: true});

// req is the micro request object
const {query} = parser(req);
```

### For Extended Verification

```js
const {parse, schema} = require('@centralping/micro-json-api-query');

// extend schema

const parser = parse(undefined, schema);

// req is the micro request object
const {query} = parser(req);
```

## Test

`npm test`

With coverage reporting:

`npm test -- --coverage`

With file watch:

`npm run watch`

## License

MIT
